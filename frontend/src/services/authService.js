import axios from "axios";
import { jwtDecode } from "jwt-decode";
const API_URL = "http://localhost:8080/auth";
const USER_API_URL = "http://localhost:8080/user";
export const login = async (username, password) => {
    try {
        const requestData = JSON.stringify({ username, password });
        console.log("üîµ Login Request Data:", requestData); // Log d·ªØ li·ªáu g·ª≠i ƒëi

        const response = await axios.post(`${API_URL}/login`, requestData, {
            headers: {
                "Content-Type": "application/json",
            },
        });

        console.log("üü¢ Login Response:", response.data); // Log d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ server
        return response.data;
    } catch (error) {
        console.error("üî¥ Login Error:", error.response ? error.response.data : error);
        throw error.response ? error.response.data : error;
    }
};

export const register = async (username, password) => {
    try {
        const requestData = JSON.stringify({
            username,
            password,
            role: "USER",
            isPremium:"false"
        });

        console.log("üîµ Register Request Data:", requestData); // Log d·ªØ li·ªáu g·ª≠i ƒëi

        const response = await axios.post(`${API_URL}/register`, requestData, {
            headers: {
                "Content-Type": "application/json",
            },
        });

        console.log("üü¢ Register Response:", response.data); // Log d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ server
        return response.data;
    } catch (error) {
        console.error("üî¥ Register Error:", error.response ? error.response.data : error);
        throw error.response ? error.response.data : error;
    }
};
export const getUserProfile = async () => {
    try {
        const token = localStorage.getItem("token");
        if (!token) {
            return null; // Kh√¥ng c√≥ token, tr·∫£ v·ªÅ null
        }

        const response = await axios.get(`${USER_API_URL}/profile`, {
            headers: {
                Authorization: `Bearer ${token}`,
            },
        });

        return response.data; // Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng
    } catch (error) {
        console.error("üî¥ Get User Profile Error:", error.response ? error.response.data : error);
        return null;
    }
};
export const upgradeToPremium = async () => {
    try {
        const token = localStorage.getItem("token");
        if (!token) {
            console.error("‚ùå Token kh√¥ng t·ªìn t·∫°i.");
            return null; // N·∫øu kh√¥ng c√≥ token, kh√¥ng th·ªÉ th·ª±c hi·ªán n√¢ng c·∫•p
        }

        // G·ª≠i y√™u c·∫ßu PUT ƒë·ªÉ n√¢ng c·∫•p l√™n Premium
        const response = await axios.put(`${USER_API_URL}/upgrade-to-premium`, {}, {
            headers: {
                Authorization: `Bearer ${token}`,
                "Content-Type": "application/json",
            },
        });

        console.log("üü¢ Upgrade to Premium Response:", response.data); // Log d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ server
        return response.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    } catch (error) {
        console.error("üî¥ Upgrade to Premium Error:", error.response ? error.response.data : error);
        throw error.response ? error.response.data : error;
    }
};

/**
 * ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng (X√≥a token kh·ªèi localStorage)
 */
export const logout = () => {
    localStorage.removeItem("token");
};
export const extractRoleFromToken = (token) => {
    try {
        const decoded = jwtDecode(token);
        return decoded.role || decoded.roles || null; // t√πy v√†o c·∫•u tr√∫c token tr·∫£ v·ªÅ
    } catch (err) {
        console.error("‚ùå L·ªói gi·∫£i m√£ token:", err);
        return null;
    }
};


